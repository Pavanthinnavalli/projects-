Password Generator Code
java
Copy code
import java.util.Random;

public class PasswordGenerator {

    // Define character sets for different types of characters
    private static final String UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String LOWERCASE = "abcdefghijklmnopqrstuvwxyz";
    private static final String DIGITS = "0123456789";
    

    // Method to generate a random password of given length
    public static String generatePassword(int length) {
        // Combine all character sets
        String allCharacters = UPPERCASE + LOWERCASE + DIGITS;
        
        // Create a Random instance
        Random random = new Random();
        
        // Create a StringBuilder to build the password
        StringBuilder password = new StringBuilder(length);
        
        // Ensure the password includes at least one character from each set
        password.append(UPPERCASE.charAt(random.nextInt(UPPERCASE.length())));
        password.append(LOWERCASE.charAt(random.nextInt(LOWERCASE.length())));
        password.append(DIGITS.charAt(random.nextInt(DIGITS.length())));
        
        
        // Fill the remaining length of the password with random characters from all sets
        for (int i = 4; i < length; i++) {
            password.append(allCharacters.charAt(random.nextInt(allCharacters.length())));
        }
        
        // Shuffle the characters to ensure randomness
        return shuffleString(password.toString());
    }

    // Method to shuffle characters of a string
    private static String shuffleString(String input) {
        // Convert the input string to a character array
        char[] a = input.toCharArray();
        
        // Create a Random instance
        Random random = new Random();
        
        // Shuffle the character array
        for (int i = 0; i < a.length; i++) {
            int j = random.nextInt(a.length);
            // Swap characters at positions i and j
            char temp = a[i];
            a[i] = a[j];
            a[j] = temp;
        }
        
        // Return the shuffled string
        return new String(a);
    }

    public static void main(String[] args) {
        // Define the desired length of the password
        int passwordLength = 12;
        
        // Generate a random password
        String password = generatePassword(passwordLength);
        
        // Print the generated password
        System.out.println("Generated Password: " + password);
    }
}
Explanation
Character Sets:

The character sets for uppercase letters, lowercase letters, digits, and special characters are defined as constant strings.
generatePassword Method:

Input: Takes the desired length of the password as an argument.
Combine Character Sets: Combines all character sets into one string called allCharacters.
Random Instance: Creates a Random instance to generate random numbers.
StringBuilder: Uses StringBuilder to construct the password.
Ensure at Least One of Each Type: Ensures the password contains at least one character from each of the four character sets by appending a random character from each set.
Fill Remaining Length: Fills the remaining characters with random selections from the combined character set.
Shuffle: Shuffles the final string to ensure randomness using the shuffleString method.
shuffleString Method:

Convert to Character Array: Converts the input string to a character array.
Shuffle Array: Shuffles the array by swapping characters at random positions.
Return Shuffled String: Converts the shuffled character array back to a string and returns it.
main Method:

Password Length: Sets the desired password length.
Generate Password: Calls generatePassword to generate a random password.
Print Password: Prints the generated password to the console.
Usage
You can adjust the passwordLength in the main method to generate passwords of different lengths.
The generatePassword method ensures the generated password includes at least one uppercase letter, one lowercase letter, one digit, and one special character, making it more secure.